@page "/"
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IModalService modal

<PageTitle>Index</PageTitle>

<h1>BlazorWASM Keycloak Authentication</h1>

This application demonstrates how to integrate with Keycloak from BlazorWASM application.

@* @if (claims.Count() > 0)
{
    <h2>User Claims:</h2>
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
} *@

@if(Interests is null)
{
    <ModalComponent Visible="@modalVisible" VisibleChanged="HandleModalVisibility" />
}
else
{
    @* <Dashboard/> *@
}

@code {
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private bool modalVisible = true; // Set to true to automatically show the modal
    private void HandleModalVisibility(bool isVisible)
    {
        modalVisible = isVisible;
        StateHasChanged();
    }

    private UserInterests Interests { get; set; } = default;
    [Inject] IKwizApiHttpClient KwizApiHttpClient { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        Interests = await KwizApiHttpClient.GetUserInterestsAsync();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            claims = user.Claims;
        }
    }
}